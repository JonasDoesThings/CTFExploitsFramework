#!/usr/bin/python3

import argparse
import importlib.util
import os

import sys
from treelib.tree import Tree, DuplicatedNodeIdError

from core.exploits.ExploitCategory import ExploitCategory
from core.logger.Logger import Logger
from core.logger import Colors
from core.ui.Banner import Banner


Banner.print_banner()
Logger.info("Initializing LolcatSec Exploits Framework...")

categories = {}
exploits = {}

parser = argparse.ArgumentParser()
parser.add_argument("--verbose", "-v", "-d", help="Enabled verbose output", action="store_true")
parser.add_argument("--exploit", "-e", help="Skip the exploit list, just run the given exploit", default="")
parser.add_argument("--info", "-i", help="Show the about page of an exploit")
parser.add_argument("--list", "-ls", help="List all available exploits", action="store_true")
parser.add_argument("--target", "-t", help="Set the target for some exploits", default=None)
parser.add_argument("--port", "-p", help="Set the target port for some exploits", default=None)

args = parser.parse_args()

exploit_tree = Tree()

exploit_tree.create_node("Available Exploits:", "root")
for category in ExploitCategory:
    exploit_tree.create_node(category.name + "/", category.name, parent="root")

for root, directories, filenames in os.walk(os.path.realpath(__file__).replace("Lolcats.py", "") + "../modules/"):
    for filename in filenames:
        if "__init__" in filename or "__pycache__" in root or filename == "Template.py":
            continue

        spec = importlib.util.spec_from_file_location("modules", os.path.join(root, filename))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

        exploit_class = getattr(module, str(filename).replace(".py", ""))
        exploit_instance = exploit_class()

        exploit_instance.args = args

        if exploit_instance.category not in categories:
            categories[exploit_instance.category] = {}

        try:
            previous = exploit_instance.category.name
            for sub in exploit_instance.subcategory.split("/"):
                if not exploit_tree.contains(sub):
                    exploit_tree.create_node(sub + "/", sub, parent=previous)

                if sub == exploit_instance.subcategory.split("/")[-1]:
                    exploit_tree.create_node(exploit_instance.name, exploit_instance.name, sub)
                previous = sub
        except DuplicatedNodeIdError as e:
            pass
        exploits[exploit_instance.name.lower()] = exploit_instance

Logger.info("Loaded " + str(len(exploits)) + " exploits!")


if args.verbose:
    Logger.debug_enabled = True

if str(args.info).lower() in exploits:
    exploit = exploits[str(args.info).lower()]

    print()
    print("/" + exploit.category.name + "/" + exploit.subcategory + "/" + Colors.underline(Colors.purple(exploit.name)))
    print()
    if exploit.authors is not None:
        print("Authors: " + exploit.authors)
    if exploit.version is not None:
        print("Version: " + exploit.version)
    print("Description: " + exploit.description)
    print()
    sys.exit(0)

if str(args.exploit).lower() in exploits:
    exploits[str(args.exploit).lower()].run()
else:
    print()
    exploit_tree.show()
    print()
    Logger.info("Specify an exploit with ./Lolcats.py " + Colors.underline(Colors.red("-e EXPLOIT_NAME")) + Colors.lightPurple(" !"))
    sys.exit(0)
