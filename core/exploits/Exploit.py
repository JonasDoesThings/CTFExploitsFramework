import time

from core.exploits.ExploitCategory import ExploitCategory
from core.logger.Logger import Logger


class Exploit:
    has_failed = False
    is_prepared = False

    start_time = -1
    time_elapsed = -1

    def __init__(self, name, description, category: ExploitCategory):
        self.name = name
        self.description = description
        self.category = category

    def prepare(self):
        try:
            self._prepare()
        except TimeoutError as e:
            self.failed("Failed to Prepare Exploit! (Message: " + str(e) + ")", plain=True)
        except Exception as e:
            self.failed("Failed to Prepare Exploit! (Message: " + str(e) + ")", plain=True)

        self.is_prepared = True

    def run(self):
        if not self.is_prepared:
            self.prepare()

        if self.has_failed:
            return

        self.start_time = int(time.time())
        try:
            self._run()
        except Exception as e:
            self._failed(str(e))

    def failed(self, message="Unknown", plain=False):
        self.has_failed = True
        self._failed(message, plain=plain)
        self._cleanup()

    def after(self):
        self.time_elapsed = int(time.time()) - self.start_time
        self._after()
        self._cleanup()

    def _prepare(self):
        raise NotImplementedError("Should have implemented this")

    def _run(self):
        raise NotImplementedError("Should have implemented this")

    def _failed(self, message, plain=False):
        if plain:
            Logger.warning(message)
        else:
            Logger.warning("Failed to run " + self.name + "! (Message: " + str(message) + ")")

    def _after(self):
        raise NotImplementedError("Should have implemented this")

    def _cleanup(self):
        raise NotImplementedError("Should have implemented this")
