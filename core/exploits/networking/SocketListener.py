import socket

from core.logger.Logger import Logger


class SocketListener(object):
    socket = None

    def __init__(self, port, host="0.0.0.0", charset="utf-8", socket_type="tcp", socket_family="ipv4"):
        self.port = int(port)
        self.host = host
        self.charset = charset
        self.connected = False

        if socket_type == "tcp":
            self.type = socket.SOCK_STREAM
        elif socket_type == "udp":
            self.type = socket.SOCK_DGRAM
        else:
            raise Exception("Socket Type '" + socket_type + "' is not supported!")

        if socket_family in ["ipv4", "v4", "4"]:
            self.family = socket.AF_INET
        elif socket_family in ["ipv6", "v6", "6"]:
            self.family = socket.AF_INET6

        self.socket = socket.socket(socket.AF_INET, self.type)

        try:
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind((self.host, self.port))
        except OSError as e:
            raise Exception("Port already in use!")

    def listen(self):
        Logger.debug("Starting to listen on " + self.host + ":" + str(self.port))
        self.socket.listen()
        Logger.debug("Successfully started to listen on " + self.host + ":" + str(self.port))

    def close(self):
        self.socket.close()

    def send(self, data):
        Logger.debug("Sending '" + str(data) + "' to " + self.host + ":" + str(self.port))
        if isinstance(data, bytes):
            self.socket.send(data)
        else:
            self.socket.send(bytes(data, self.charset))

    def read(self, convert_to_str=True):
        Logger.debug("Reading socket from " + self.host + ":" + str(self.port))
        buffer_len = 4096

        if self.type == socket.SOCK_DGRAM:
            buffer_len = 65535

        while True:
            print("a")
            connection, address = self.socket.accept()
            buffer = connection.recv(buffer_len)

            if len(buffer) > 0:
                if convert_to_str:
                    return buffer.decode(self.charset)
                else:
                    return buffer
            else:
                return ""
