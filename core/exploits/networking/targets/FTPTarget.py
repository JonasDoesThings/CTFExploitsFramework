from ftplib import FTP, error_perm

from core.logger.Logger import Logger


class FTPTarget:

    def __init__(self, host, port=21, timeout=10):
        self.host = host
        self.port = int(port)
        self.timeout = timeout

        self.ftp_client = FTP(host, timeout=self.timeout)

    def connect(self, username, password, auto_login=True):
        self.ftp_client.connect(self.host, self.port, timeout=self.timeout)
        if auto_login:
            self.login(username, password)

    """
        Set username & password to None, in order to login anonymous
    """

    def login(self, username, password):
        if username is None and password is None:
            Logger.debug("Loging into FTP Server with anonymous account")
            Logger.debug(self.ftp_client.login())
        else:
            Logger.debug("Loging into FTP Server with " + username)
            Logger.debug(self.ftp_client.login(username, password))

    def close(self):
        self.ftp_client.close()

    """
        Change directory to dirname
    """

    def cd(self, dirname):
        self.ftp_client.cwd(dirname)

    """
        Get contents of current directory
    """

    def ls(self):
        return self.ftp_client.retrlines("LIST")

    def upload(self, file):
        self.ftp_client.storbinary("STOR " + file, open(file, "rb"))

    def download(self, filename, local_filename=None):
        if local_filename is None:
            local_filename = filename

        try:
            self.ftp_client.retrbinary("RETR " + filename, open(local_filename, "wb").write)
        except error_perm as e:
            Logger.warning("Received an error_perm error. The file doesn't exist, or you don't have permissions.")

    def abort_download(self):
        self.ftp_client.abort()

    def delete(self, filename):
        self.ftp_client.delete(filename)

    def rename(self, old_filename, new_filename):
        self.ftp_client.rename(old_filename, new_filename)

    def mkdir(self, dirname):
        self.ftp_client.mkd(dirname)
