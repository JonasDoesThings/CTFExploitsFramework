import socket

from core.logger.Logger import Logger


class RemoteTarget(object):
    socket = None

    def __init__(self, host, port, charset="utf-8", sockettype="tcp", timeout=10):
        self.host = host
        self.port = int(port)
        self.charset = charset
        self.connected = False

        if sockettype == "tcp":
            self.type = socket.SOCK_STREAM
        elif sockettype == "udp":
            self.type = socket.SOCK_DGRAM
        else:
            raise Exception("Socket Type '" + sockettype + "' is not supported!")

        self.socket = socket.socket(socket.AF_INET, self.type)

        self.socket.settimeout(timeout)

    def connect(self):
        Logger.debug("Connecting socket to " + self.host + ":" + str(self.port))
        self.socket.connect((self.host, self.port))
        Logger.debug("Successfully connected to " + self.host + ":" + str(self.port))

    def close(self):
        self.socket.close()

    def send(self, data):
        Logger.debug("Sending '" + str(data) + "' to " + self.host + ":" + str(self.port))
        if isinstance(data, bytes):
            self.socket.sendall(data)
        else:
            self.socket.sendall(bytes(data, self.charset))

    def read(self, convert_to_str=True):
        Logger.debug("Reading socket from " + self.host + ":" + str(self.port))
        buffer_len = 4096

        if self.type == socket.SOCK_DGRAM:
            buffer_len = 65535

        buffer = self.socket.recv(buffer_len)
        if len(buffer) > 0:
            if convert_to_str:
                return buffer.decode(self.charset)
            else:
                return buffer
        else:
            return ""
