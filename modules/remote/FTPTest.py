import os

from core.exploits.Exploit import Exploit
from core.exploits.ExploitCategory import ExploitCategory
from core.exploits.networking.targets.FTPTarget import FTPTarget
from core.logger.Logger import Logger


class FTPTest(Exploit):
    ftp = None

    def __init__(self):
        # Exploit Name, Exploit Description, Exploit Target Category
        super().__init__("ftptest", "desc", ExploitCategory.remote)

    # Prepare stuff
    def _prepare(self):
        self.ftp = FTPTarget("speedtest.tele2.net", timeout=60)

    # Do Stuff
    def _run(self):
        Logger.info("Connecting to FTP Server...")
        self.ftp.connect(None, None)
        Logger.info("Logged into FTP Server " + self.ftp.host + ":" + str(self.ftp.port))

        Logger.info("Testing download...")
        self.ftp.download("1KB.zip", local_filename="1KB.zip")
        Logger.info("Done downloading...")

        if os.path.getsize("1KB.zip") > 0:
            Logger.info("Download should have worked (Check manually)")

        Logger.info("Testing cd...")
        self.ftp.cd("upload")

        Logger.info("Testing upload...")
        self.ftp.upload("1KB.zip")
        Logger.info("Done uploading...")

        Logger.info("Testing ls...")
        print(self.ftp.ls())

    # Gets called after the exploit got executed
    def _after(self):
        pass

    # Gets called if the exploit has failed
    def _failed(self, message):
        pass

    # Clean stuff up (Gets called after after())
    def _cleanup(self):
        self.ftp.close()
