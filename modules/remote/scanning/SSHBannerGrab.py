from core.exploits.Exploit import Exploit
from core.exploits.ExploitCategory import ExploitCategory
from core.exploits.networking.targets.RemoteTarget import RemoteTarget
from core.logger.Logger import Logger


class SSHBannerGrab(Exploit):
    target = None

    def __init__(self):
        # Exploit Name, Exploit Description, Exploit Target Category
        super().__init__("ssh-bannergrab", "Prints the SSH Server's banner", ExploitCategory.remote, "scanning/ssh")

    # Prepare stuff
    def _prepare(self):
        if self.args.target is None:
            self.failed("You need to specify a target with --target <target> !")

        if self.args.port is None:
            Logger.info("No port specified, using standard port 22")
            self.port = 22
        else:
            self.port = int(self.args.port)

        try:
            self.target = RemoteTarget(self.args.target, self.port)
            self.target.connect()
        except Exception as e:
            self.failed("Failed to connect to the SSH server at "
                        + self.args.target + ":" + str(self.port) + "! (" + str(e) + ")")

    # Do Stuff
    def _run(self):
        self.target.send(b'WhoAreYou\r\n')
        Logger.info(self.args.target + ":" + str(self.port) + " - " + self.target.read())

    # Gets called after the exploit got executed
    def _after(self):
        pass

    # Gets called if the exploit has failed
    def _failed(self, message):
        pass

    # Clean stuff up (Gets called after after())
    def _cleanup(self):
        self.target.close()
